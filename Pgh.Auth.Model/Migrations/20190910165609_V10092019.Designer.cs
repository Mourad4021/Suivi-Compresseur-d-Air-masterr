// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pgh.Auth.Model.Models;

namespace Pgh.Auth.Model.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20190910165609_V10092019")]
    partial class V10092019
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Pgh.Auth.Model.Models.AffApplicationUsers", b =>
                {
                    b.Property<Guid>("AppId");

                    b.Property<Guid>("UsersId");

                    b.Property<string>("Password");

                    b.HasKey("AppId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AffApplicationUsers");
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.AffGroupUsers", b =>
                {
                    b.Property<Guid>("GrpId");

                    b.Property<Guid>("UsersId");

                    b.HasKey("GrpId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AffGroupUsers");
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.AffRoleGroupMenus", b =>
                {
                    b.Property<Guid>("GrpId");

                    b.Property<Guid>("MenuId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("GrpId", "MenuId", "RoleId");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.ToTable("AffRoleGroupMenus");
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.AffRolePermissions", b =>
                {
                    b.Property<Guid>("PermId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("PermId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AffRolePermissions");
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.AffRolesUsersMenus", b =>
                {
                    b.Property<Guid>("UsersId");

                    b.Property<Guid>("MenuId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UsersId", "MenuId", "RoleId");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.ToTable("AffRolesUsersMenus");
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.Applications", b =>
                {
                    b.Property<Guid>("AppId");

                    b.Property<string>("AppCode");

                    b.Property<string>("AppDescription");

                    b.Property<string>("AppDisplayName");

                    b.Property<string>("AppName");

                    b.Property<bool>("AppState");

                    b.HasKey("AppId");

                    b.HasIndex("AppCode")
                        .IsUnique()
                        .HasFilter("([AppCode] IS NOT NULL)");

                    b.ToTable("Applications");

                    b.HasData(
                        new
                        {
                            AppId = new Guid("fc5dcfbb-7f24-479c-922c-e8663bf5cab4"),
                            AppCode = "0000",
                            AppDescription = "Cette application gérer l'authentification et des permissions des différents applications.",
                            AppDisplayName = "Gestion de l'authentification  des applications",
                            AppName = "AuthApp",
                            AppState = true
                        },
                        new
                        {
                            AppId = new Guid("f39a767f-fb5d-490a-b3a3-6903eeb21638"),
                            AppCode = "0001",
                            AppDescription = "Cette application gérer le processus d'analyse des échantillons par le labo Dick.",
                            AppDisplayName = "Gestion de laboratoire Dick",
                            AppName = "LaboDickAgro",
                            AppState = true
                        },
                        new
                        {
                            AppId = new Guid("0a70dd20-305c-4e2b-b84e-704d827d2bfb"),
                            AppCode = "0013",
                            AppDescription = "Mise a jour de l'ancienne application Laboratoir Dick.",
                            AppDisplayName = "Gestion de laboratoire Dick Elevage",
                            AppName = "LaboDickElevage",
                            AppState = true
                        });
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.Groupes", b =>
                {
                    b.Property<Guid>("GrpId");

                    b.Property<Guid?>("FkAppId");

                    b.Property<string>("GrpDescription");

                    b.Property<string>("GrpDisplayName");

                    b.Property<string>("GrpName");

                    b.Property<bool>("GrpState");

                    b.HasKey("GrpId");

                    b.HasIndex("FkAppId");

                    b.ToTable("Groupes");
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.Menus", b =>
                {
                    b.Property<Guid>("MenuId");

                    b.Property<Guid?>("FkAppId");

                    b.Property<Guid?>("FkMenuId");

                    b.Property<string>("MenuDescription");

                    b.Property<string>("MenuDisplayName");

                    b.Property<string>("MenuName");

                    b.Property<bool>("MenuState");

                    b.Property<string>("MenuUrl");

                    b.HasKey("MenuId");

                    b.HasIndex("FkAppId");

                    b.HasIndex("FkMenuId");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            MenuId = new Guid("80795f57-7878-4ba4-9acb-ce0ee1a1e87e"),
                            FkAppId = new Guid("fc5dcfbb-7f24-479c-922c-e8663bf5cab4"),
                            MenuDescription = "User setup menu.",
                            MenuDisplayName = "Users",
                            MenuName = "AuthUsers",
                            MenuState = true,
                            MenuUrl = "Http://srvapp/authusers"
                        },
                        new
                        {
                            MenuId = new Guid("52010bc1-528f-4ea3-b978-dbb5956cd88c"),
                            FkAppId = new Guid("fc5dcfbb-7f24-479c-922c-e8663bf5cab4"),
                            MenuDescription = "Permissions setup menu.",
                            MenuDisplayName = "Permissions",
                            MenuName = "AuthPermissions",
                            MenuState = true,
                            MenuUrl = "Http://srvapp/authpermissions"
                        },
                        new
                        {
                            MenuId = new Guid("19b3c4d6-bd51-441f-8455-0b19d164a7dd"),
                            FkAppId = new Guid("fc5dcfbb-7f24-479c-922c-e8663bf5cab4"),
                            MenuDescription = "Roles setup menu.",
                            MenuDisplayName = "Roles",
                            MenuName = "AuthRoles",
                            MenuState = true,
                            MenuUrl = "Http://srvapp/authroles"
                        },
                        new
                        {
                            MenuId = new Guid("b01a7bf8-036a-4ff2-97f1-5a71f1eb35c8"),
                            FkAppId = new Guid("fc5dcfbb-7f24-479c-922c-e8663bf5cab4"),
                            MenuDescription = "Applications setup menu.",
                            MenuDisplayName = "Applications",
                            MenuName = "AuthApplications",
                            MenuState = true,
                            MenuUrl = "Http://srvapp/authappications"
                        },
                        new
                        {
                            MenuId = new Guid("300b625d-4be5-455e-bab8-b6c0dd29540c"),
                            FkAppId = new Guid("fc5dcfbb-7f24-479c-922c-e8663bf5cab4"),
                            MenuDescription = "Menus setup menu.",
                            MenuDisplayName = "Menus",
                            MenuName = "AuthMenus",
                            MenuState = true,
                            MenuUrl = "Http://srvapp/authmenus"
                        });
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.Permissions", b =>
                {
                    b.Property<Guid>("PermId");

                    b.Property<string>("PermDescription");

                    b.Property<string>("PermDisplayName");

                    b.Property<string>("PermName");

                    b.Property<bool>("PermState");

                    b.HasKey("PermId");

                    b.HasIndex("PermName")
                        .IsUnique()
                        .HasFilter("([PermName] IS NOT NULL)");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            PermId = new Guid("13377610-d71b-4c3a-a7a1-feed4f21fb15"),
                            PermDescription = "Users Will Have the permission to add items",
                            PermDisplayName = "Add Items",
                            PermName = "AddItems",
                            PermState = true
                        },
                        new
                        {
                            PermId = new Guid("c68d7a74-7e29-4b24-90a2-5f06f9e40048"),
                            PermDescription = "Users Will Have Permission to edit Items.",
                            PermDisplayName = "Edit Items",
                            PermName = "EditItems",
                            PermState = true
                        },
                        new
                        {
                            PermId = new Guid("b781e222-af1d-4abf-af36-96c507815829"),
                            PermDescription = "Users Will Have Permission to delete Elements.",
                            PermDisplayName = "Delete Items",
                            PermName = "DeleteItems",
                            PermState = true
                        },
                        new
                        {
                            PermId = new Guid("e2855fd2-6713-420a-96c6-b31ba50a6f89"),
                            PermDescription = "Users Will Have Permission to View Items.",
                            PermDisplayName = "View Items",
                            PermName = "ViewItems",
                            PermState = true
                        },
                        new
                        {
                            PermId = new Guid("81a7c86b-65de-4b7c-a608-b1d904f499b6"),
                            PermDescription = "Users Will Have Permission to approve items.",
                            PermDisplayName = "Approve Items",
                            PermName = "ApproveItems",
                            PermState = true
                        },
                        new
                        {
                            PermId = new Guid("20ead205-14ac-4a14-adce-2d69df261801"),
                            PermDescription = "Users Will Have Permission to show versions.",
                            PermDisplayName = "Show Versions",
                            PermName = "ShowVersions",
                            PermState = true
                        },
                        new
                        {
                            PermId = new Guid("ea418322-d667-4742-8b47-79e0bcd9c43c"),
                            PermDescription = "Users Will Have Permission to Delete versions.",
                            PermDisplayName = "Delete Versions",
                            PermName = "DeleteVersions",
                            PermState = true
                        },
                        new
                        {
                            PermId = new Guid("ddfea423-43ab-460f-aa82-75e9e56c6bd3"),
                            PermDescription = "Users Will Have Permission to view application pages.",
                            PermDisplayName = "View application pages",
                            PermName = "ViewApplicationPages",
                            PermState = true
                        },
                        new
                        {
                            PermId = new Guid("b6cc17d7-8885-474d-8397-08dd594a43d9"),
                            PermDescription = "Users Will Have Permission to create groups.",
                            PermDisplayName = "Create Groups",
                            PermName = "CreateGroups",
                            PermState = true
                        },
                        new
                        {
                            PermId = new Guid("0c3fb9e5-9703-47ca-8290-e0ee0a6bf704"),
                            PermDescription = "Users Will Have Permission to view pages.",
                            PermDisplayName = "View Pages",
                            PermName = "ViewPages",
                            PermState = true
                        },
                        new
                        {
                            PermId = new Guid("d23cdb47-bc5f-4d55-b1a8-fbf033a11c16"),
                            PermDescription = "Users Will Have Permission to edit users personal information.",
                            PermDisplayName = "Edit user's personal information",
                            PermName = "EditUserPersonalInformation",
                            PermState = true
                        },
                        new
                        {
                            PermId = new Guid("55246a69-70f1-484c-b454-057040cb408d"),
                            PermDescription = "Users Will Have Permission to Manage personal views.",
                            PermDisplayName = "Manage personal views",
                            PermName = "ManagePersonalViews",
                            PermState = true
                        });
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.Roles", b =>
                {
                    b.Property<Guid>("RoleId");

                    b.Property<string>("RoleDescription");

                    b.Property<string>("RoleDisplayName");

                    b.Property<string>("RoleName");

                    b.Property<bool>("RoleState");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleName")
                        .IsUnique()
                        .HasFilter("([RoleName] IS NOT NULL)");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("5acd82a4-dd50-46ed-9a82-7a735663e0df"),
                            RoleDescription = "Total Control Default Groupe",
                            RoleDisplayName = "Total Control",
                            RoleName = "TotalControl",
                            RoleState = true
                        },
                        new
                        {
                            RoleId = new Guid("870057fd-94b0-4b02-9749-d058ac5fdc03"),
                            RoleDescription = "Design Groupe Default Groupe",
                            RoleDisplayName = "Design Groupe",
                            RoleName = "Design",
                            RoleState = true
                        },
                        new
                        {
                            RoleId = new Guid("a59d6f95-74a2-4525-ad61-f6ab6e626ea3"),
                            RoleDescription = "Editors Groupe Default Groupe",
                            RoleDisplayName = "Editors Groupe",
                            RoleName = "Editors",
                            RoleState = true
                        },
                        new
                        {
                            RoleId = new Guid("ef49422b-0246-464b-8bae-a6f5408a82b1"),
                            RoleDescription = "Collaboration Default Groupe",
                            RoleDisplayName = "Collaboration Groupe",
                            RoleName = "Collaboration",
                            RoleState = true
                        },
                        new
                        {
                            RoleId = new Guid("663f67d9-599c-42c3-b818-0c939c5e14c1"),
                            RoleDescription = "Readers Groupe Default Groupe",
                            RoleDisplayName = "Readers Groupe",
                            RoleName = "Readers",
                            RoleState = true
                        },
                        new
                        {
                            RoleId = new Guid("5cb17690-b876-46d9-97a5-9d3ef9c6295f"),
                            RoleDescription = "Limited Access Default Groupe",
                            RoleDisplayName = "Limited Access",
                            RoleName = "LimitedAccess",
                            RoleState = true
                        },
                        new
                        {
                            RoleId = new Guid("319d93fe-47f0-49cf-a4c6-f358fe88354c"),
                            RoleDescription = "Display Only Default Groupe",
                            RoleDisplayName = "Display Only Groupe",
                            RoleName = "DisplayOnly",
                            RoleState = true
                        },
                        new
                        {
                            RoleId = new Guid("378ddc6d-f019-4103-a072-1a2f0da53094"),
                            RoleDescription = "Approval Default Groupe",
                            RoleDisplayName = "Approval Groupe",
                            RoleName = "Approval",
                            RoleState = true
                        },
                        new
                        {
                            RoleId = new Guid("aad23d91-72f7-46da-a5b6-ea8a6d6fc526"),
                            RoleDescription = "Restricted reading Default Groupe",
                            RoleDisplayName = "Restricted reading Groupe",
                            RoleName = "Restricted reading",
                            RoleState = true
                        });
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.Users", b =>
                {
                    b.Property<Guid>("UsersId");

                    b.Property<Guid?>("FkUsersId");

                    b.Property<DateTime>("UsersBirthDate");

                    b.Property<string>("UsersCode")
                        .HasMaxLength(8);

                    b.Property<DateTime>("UsersDateLeave");

                    b.Property<string>("UsersFilialeCode");

                    b.Property<string>("UsersFilialeName");

                    b.Property<string>("UsersGenderCode");

                    b.Property<DateTime>("UsersJoinDate");

                    b.Property<string>("UsersLastName")
                        .HasMaxLength(50);

                    b.Property<string>("UsersMail")
                        .HasMaxLength(80);

                    b.Property<string>("UsersMailIntern")
                        .HasMaxLength(80);

                    b.Property<string>("UsersName")
                        .HasMaxLength(50);

                    b.Property<string>("UsersPersonalNumber");

                    b.Property<string>("UsersPhoneNumber");

                    b.Property<string>("UsersPosteName");

                    b.Property<bool>("UsersState");

                    b.HasKey("UsersId");

                    b.HasIndex("FkUsersId");

                    b.HasIndex("UsersCode")
                        .IsUnique()
                        .HasFilter("([UsersCode] IS NOT NULL)");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UsersId = new Guid("d360d9d1-540d-4915-8637-a58990c0eff2"),
                            UsersBirthDate = new DateTime(2019, 9, 10, 17, 56, 9, 134, DateTimeKind.Local).AddTicks(7439),
                            UsersCode = "00000000",
                            UsersDateLeave = new DateTime(2019, 9, 10, 17, 56, 9, 136, DateTimeKind.Local).AddTicks(3466),
                            UsersFilialeCode = "DD01",
                            UsersFilialeName = "PoulinaGroupeHolding",
                            UsersGenderCode = "M",
                            UsersJoinDate = new DateTime(2019, 9, 10, 17, 56, 9, 136, DateTimeKind.Local).AddTicks(4362),
                            UsersLastName = "Admin",
                            UsersMail = "Admin@poulina.com",
                            UsersMailIntern = "Admin@poulina.com",
                            UsersName = "Admin",
                            UsersPersonalNumber = "63524163",
                            UsersPhoneNumber = "63524141",
                            UsersPosteName = "Admin Poste",
                            UsersState = false
                        },
                        new
                        {
                            UsersId = new Guid("1eb21829-ebee-410a-a3b2-6237bf8c24c9"),
                            UsersBirthDate = new DateTime(2019, 9, 10, 17, 56, 9, 137, DateTimeKind.Local).AddTicks(2110),
                            UsersCode = "00000001",
                            UsersDateLeave = new DateTime(2019, 9, 10, 17, 56, 9, 137, DateTimeKind.Local).AddTicks(2119),
                            UsersFilialeCode = "DD01",
                            UsersFilialeName = "PoulinaGroupeHolding",
                            UsersGenderCode = "M",
                            UsersJoinDate = new DateTime(2019, 9, 10, 17, 56, 9, 137, DateTimeKind.Local).AddTicks(2123),
                            UsersLastName = "SupAdmin",
                            UsersMail = "SupAdmin@poulina.com",
                            UsersMailIntern = "SupAdmin@poulina.com",
                            UsersName = "SupAdmin",
                            UsersPersonalNumber = "63524163",
                            UsersPhoneNumber = "63524141",
                            UsersPosteName = "SupAdmin Poste",
                            UsersState = false
                        },
                        new
                        {
                            UsersId = new Guid("ac1f391b-da75-4d08-8222-26969a35ce58"),
                            UsersBirthDate = new DateTime(2019, 9, 10, 17, 56, 9, 137, DateTimeKind.Local).AddTicks(2170),
                            UsersCode = "00000002",
                            UsersDateLeave = new DateTime(2019, 9, 10, 17, 56, 9, 137, DateTimeKind.Local).AddTicks(2171),
                            UsersFilialeCode = "DD01",
                            UsersFilialeName = "PoulinaGroupeHolding",
                            UsersGenderCode = "M",
                            UsersJoinDate = new DateTime(2019, 9, 10, 17, 56, 9, 137, DateTimeKind.Local).AddTicks(2171),
                            UsersLastName = "Test",
                            UsersMail = "User1@poulina.com",
                            UsersMailIntern = "User1@poulina.com",
                            UsersName = "User1",
                            UsersPersonalNumber = "63524163",
                            UsersPhoneNumber = "63524141",
                            UsersPosteName = "User1 Poste",
                            UsersState = false
                        },
                        new
                        {
                            UsersId = new Guid("da4a9814-7c71-4104-8447-cb778317db6c"),
                            UsersBirthDate = new DateTime(2019, 9, 10, 17, 56, 9, 137, DateTimeKind.Local).AddTicks(2204),
                            UsersCode = "00000003",
                            UsersDateLeave = new DateTime(2019, 9, 10, 17, 56, 9, 137, DateTimeKind.Local).AddTicks(2204),
                            UsersFilialeCode = "DD01",
                            UsersFilialeName = "PoulinaGroupeHolding",
                            UsersGenderCode = "M",
                            UsersJoinDate = new DateTime(2019, 9, 10, 17, 56, 9, 137, DateTimeKind.Local).AddTicks(2205),
                            UsersLastName = "Test",
                            UsersMail = "User2@poulina.com",
                            UsersMailIntern = "User2@poulina.com",
                            UsersName = "User2",
                            UsersPersonalNumber = "63524163",
                            UsersPhoneNumber = "63524141",
                            UsersPosteName = "User2 Poste",
                            UsersState = false
                        });
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.AffApplicationUsers", b =>
                {
                    b.HasOne("Pgh.Auth.Model.Models.Applications", "App")
                        .WithMany("AffApplicationUsers")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pgh.Auth.Model.Models.Users", "Users")
                        .WithMany("AffApplicationUsers")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.AffGroupUsers", b =>
                {
                    b.HasOne("Pgh.Auth.Model.Models.Groupes", "Grp")
                        .WithMany("AffGroupUsers")
                        .HasForeignKey("GrpId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pgh.Auth.Model.Models.Users", "Users")
                        .WithMany("AffGroupUsers")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.AffRoleGroupMenus", b =>
                {
                    b.HasOne("Pgh.Auth.Model.Models.Groupes", "Groupe")
                        .WithMany("AffRoleGroupMenus")
                        .HasForeignKey("GrpId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pgh.Auth.Model.Models.Menus", "Menu")
                        .WithMany("AffRoleGroupMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pgh.Auth.Model.Models.Roles", "Role")
                        .WithMany("AffRoleGroupMenus")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.AffRolePermissions", b =>
                {
                    b.HasOne("Pgh.Auth.Model.Models.Permissions", "Permission")
                        .WithMany("AffRolePermissions")
                        .HasForeignKey("PermId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pgh.Auth.Model.Models.Roles", "Role")
                        .WithMany("AffRolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.AffRolesUsersMenus", b =>
                {
                    b.HasOne("Pgh.Auth.Model.Models.Menus", "Menu")
                        .WithMany("AffRolesUsersMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pgh.Auth.Model.Models.Roles", "Role")
                        .WithMany("AffRolesUsersMenus")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pgh.Auth.Model.Models.Users", "Users")
                        .WithMany("AffRolesUsersMenus")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.Groupes", b =>
                {
                    b.HasOne("Pgh.Auth.Model.Models.Applications", "FkApp")
                        .WithMany("Groupes")
                        .HasForeignKey("FkAppId")
                        .HasConstraintName("FK_Groupes_Applications")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.Menus", b =>
                {
                    b.HasOne("Pgh.Auth.Model.Models.Applications", "FkApp")
                        .WithMany("Menus")
                        .HasForeignKey("FkAppId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pgh.Auth.Model.Models.Menus", "FkMenu")
                        .WithMany("InverseFkMenu")
                        .HasForeignKey("FkMenuId");
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.Users", b =>
                {
                    b.HasOne("Pgh.Auth.Model.Models.Users", "FkUsers")
                        .WithMany("InverseFkUsers")
                        .HasForeignKey("FkUsersId");
                });
#pragma warning restore 612, 618
        }
    }
}
